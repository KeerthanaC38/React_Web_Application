{"ast":null,"code":"var _jsxFileName = \"C:\\\\CS 584 EWA\\\\Assignment 5 React with Database\\\\frontend\\\\src\\\\Pages\\\\ViewOrderPage.js\",\n  _s = $RefreshSig$();\n// ViewOrderPage.js\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { viewOrder, cancelOrder, getMaxOrderId, viewOrderWithId } from '../Reducer/orderReducer';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ViewOrderPage = ({\n  orders\n}) => {\n  _s();\n  const [orderIdInput, setOrderIdInput] = useState('');\n  console.log('Viewing order with ID:', orderIdInput);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [viewOrderTrue, setViewOrderTrue] = useState(false);\n  const [orderIdNA, setOrderIdNA] = useState(false);\n  const [viewOrder1, setViewOrder1] = useState([]);\n  const handleViewOrder = async () => {\n    // Dispatch the action to view the order with the specified orderId\n    const orderId1 = Number(orderIdInput);\n    console.log(\"all orders\", orders);\n    if (orderId1 <= getMaxOrderId(orders)) {\n      console.log(\"view order 1\", orders[orderId1]);\n      setViewOrderTrue(true);\n      setViewOrder1(viewOrderWithId(orders, orderId1));\n      try {\n        const response = await fetch(`http://localhost:3001/orderDetails/${orderId1}`);\n        if (response.ok) {\n          const orderDetails = await response.json();\n          console.log('Order details:', orderDetails);\n          setViewOrder1(orderDetails);\n          // ... handle the retrieved order details ...\n        } else {\n          console.error('Error fetching order details:', response.statusText);\n        }\n        // Rest of your code for handling the response...\n      } catch (error) {\n        console.error('Error fetching order details:', error);\n        // Handle error\n      }\n    } else {\n      setViewOrderTrue(false);\n      console.log(\"Orderid is not available\");\n      setOrderIdNA(true);\n    }\n    //dispatch(viewOrder(Number(orderIdInput)));\n    //dispatch(viewOrder(parseInt(orderIdInput, 10)));\n  };\n\n  const handleCancelOrder = () => {\n    // Dispatch the action to cancel the order with the specified orderId\n    setOrderIdNA(true);\n    dispatch(cancelOrder(Number(orderIdInput)));\n    navigate(`/cancelOrderPage?orderId=${orderIdInput}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"View Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"orderIdInput\",\n      children: \"Order ID:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"numeric\",\n      id: \"orderIdInput\",\n      value: orderIdInput,\n      onChange: e => setOrderIdInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleViewOrder,\n      children: \"View Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), viewOrderTrue ? viewOrder1.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Order ID: \", viewOrder1[0].orderId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Cart: \", viewOrder1[0].cart[0].id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Order Type: \", viewOrder1[0].orderType]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancelOrder,\n        children: \"Cancel Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"-----------------------------------------\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, viewOrder1[0].orderId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No order found with the specified ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this) : orderIdNA ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No order found with the specified ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewOrderPage, \"0RUICsJUj6cPdAunlOMArdXBfv8=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n_c = ViewOrderPage;\nconst mapStateToProps = state => {\n  return {\n    orders: state.order // Get orders from the Redux store\n  };\n};\n\nexport default connect(mapStateToProps)(ViewOrderPage);\nvar _c;\n$RefreshReg$(_c, \"ViewOrderPage\");","map":{"version":3,"names":["React","useState","connect","useDispatch","viewOrder","cancelOrder","getMaxOrderId","viewOrderWithId","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ViewOrderPage","orders","_s","orderIdInput","setOrderIdInput","console","log","dispatch","navigate","viewOrderTrue","setViewOrderTrue","orderIdNA","setOrderIdNA","viewOrder1","setViewOrder1","handleViewOrder","orderId1","Number","response","fetch","ok","orderDetails","json","error","statusText","handleCancelOrder","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","onClick","length","orderId","cart","orderType","_c","mapStateToProps","state","order","$RefreshReg$"],"sources":["C:/CS 584 EWA/Assignment 5 React with Database/frontend/src/Pages/ViewOrderPage.js"],"sourcesContent":["// ViewOrderPage.js\r\n\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { viewOrder, cancelOrder, getMaxOrderId, viewOrderWithId } from '../Reducer/orderReducer';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ViewOrderPage = ({ orders }) => {\r\n  const [orderIdInput, setOrderIdInput] = useState('');\r\n  console.log('Viewing order with ID:', orderIdInput);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [viewOrderTrue, setViewOrderTrue]= useState(false);\r\n  const [orderIdNA,setOrderIdNA] =useState(false);\r\n  const [viewOrder1, setViewOrder1]= useState([]);\r\n\r\n  const handleViewOrder = async() => {\r\n    // Dispatch the action to view the order with the specified orderId\r\n      const orderId1=Number(orderIdInput);\r\n      console.log(\"all orders\" , orders);\r\n      if(orderId1<= getMaxOrderId(orders)){\r\n       console.log(\"view order 1\", orders[orderId1]);\r\n       setViewOrderTrue(true);\r\n       setViewOrder1(viewOrderWithId(orders,orderId1));\r\n\r\n       try {\r\n        const response = await fetch(`http://localhost:3001/orderDetails/${orderId1}`);\r\n        if (response.ok) {\r\n          const orderDetails = await response.json();\r\n          console.log('Order details:', orderDetails);\r\n          setViewOrder1(orderDetails);\r\n          // ... handle the retrieved order details ...\r\n        } else {\r\n          console.error('Error fetching order details:', response.statusText);\r\n        }\r\n        // Rest of your code for handling the response...\r\n      } catch (error) {\r\n        console.error('Error fetching order details:', error);\r\n        // Handle error\r\n      }\r\n\r\n      }\r\n      else{\r\n        setViewOrderTrue(false);\r\n        console.log(\"Orderid is not available\");\r\n        setOrderIdNA(true);\r\n\r\n      }\r\n    //dispatch(viewOrder(Number(orderIdInput)));\r\n    //dispatch(viewOrder(parseInt(orderIdInput, 10)));\r\n  };\r\n\r\n  const handleCancelOrder = () => {\r\n    // Dispatch the action to cancel the order with the specified orderId\r\n    setOrderIdNA(true);\r\n    dispatch(cancelOrder(Number(orderIdInput)));\r\n    navigate(`/cancelOrderPage?orderId=${orderIdInput}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>View Order</h2>\r\n      <label htmlFor=\"orderIdInput\">Order ID:</label>\r\n      <input\r\n        type=\"numeric\"\r\n        id=\"orderIdInput\"\r\n        value={orderIdInput}\r\n        onChange={(e) => setOrderIdInput(e.target.value)}\r\n      />\r\n      <button onClick={handleViewOrder}>View Order</button>\r\n      {\r\n  viewOrderTrue ? (\r\n    viewOrder1.length > 0 ? (\r\n      <div key={viewOrder1[0].orderId}>\r\n        {/* Display order details here */}\r\n        <p>Order ID: {viewOrder1[0].orderId}</p>\r\n        <p>Cart: {viewOrder1[0].cart[0].id}</p>\r\n        <p>Order Type: {viewOrder1[0].orderType}</p>\r\n        {/* Add more order details */}\r\n        <button onClick={handleCancelOrder}>Cancel Order</button>\r\n        <p>-----------------------------------------</p>\r\n      </div>\r\n    ) : (\r\n      <p>No order found with the specified ID</p>\r\n    )\r\n  ) : (\r\n    orderIdNA ?  <p>No order found with the specified ID</p>:<></>\r\n  )\r\n}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    orders: state.order, // Get orders from the Redux store\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(ViewOrderPage);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}