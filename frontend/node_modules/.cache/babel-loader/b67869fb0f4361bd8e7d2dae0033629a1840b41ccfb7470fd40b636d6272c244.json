{"ast":null,"code":"var _jsxFileName = \"C:\\\\CS 584 EWA\\\\Assignment 5 React with Database\\\\frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ShopContextProvider from './Context/ShopContext';\nimport { store, persistor } from './Store/Store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(PersistGate, {\n    loading: null,\n    persistor: persistor,\n    children: /*#__PURE__*/_jsxDEV(ShopContextProvider, {\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/CustomerProductReviews', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// Define the schema for the reviews\nconst reviewSchema = new mongoose.Schema({\n  productName: String,\n  // Add other fields as needed\n  // For example:\n  username: String,\n  productType: String,\n  productPrice: String,\n  productMaker: String,\n  manufacturerRebates: String,\n  productOnSale: String,\n  productName: String,\n  reviewRating: String,\n  storeID: String,\n  zipCode: String,\n  retailerCity: String,\n  retailerState: String,\n  userAge: String,\n  userGender: String,\n  userOccupation: String,\n  reviewDate: String,\n  reviewText: String\n});\n\n// Create a model based on the schema\nconst Review = mongoose.model('myReviews', reviewSchema);\n\n// Middleware to parse JSON requests\napp.use(bodyParser.json());\n\n// Route to handle the review submission\napp.post('/', async (req, res) => {\n  try {\n    const {\n      username,\n      productName,\n      productType,\n      productPrice,\n      productMaker,\n      manufacturerRebates,\n      productOnSale,\n      reviewRating,\n      storeID,\n      zipCode,\n      retailerCity,\n      retailerState,\n      userAge,\n      userGender,\n      userOccupation,\n      reviewDate,\n      reviewText\n    } = req.body;\n\n    // Create a new review document\n    const newReview = new Review({\n      username,\n      productName,\n      productType,\n      productPrice,\n      productMaker,\n      manufacturerRebates,\n      productOnSale,\n      reviewRating,\n      storeID,\n      zipCode,\n      retailerCity,\n      retailerState,\n      userAge,\n      userGender,\n      userOccupation,\n      reviewDate,\n      reviewText\n    });\n\n    // Save the review to the database\n    await newReview.save();\n    console.log(\"new review: \", newReview);\n    res.status(201).json({\n      message: 'Review submitted successfully'\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\napp.get('/getReviews', async (req, res) => {\n  try {\n    const reviews = await Review.find(); // Assuming \"Review\" is your Mongoose model\n    res.json(reviews);\n  } catch (error) {\n    console.error('Error fetching reviews:', error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\n\n// Define the route to get reviews by product ID\napp.get('/getReviewsByProductId', async (req, res) => {\n  try {\n    const productId = req.query.productId;\n    const reviews = await Review.find({\n      productName: productId\n    });\n    res.json(reviews);\n  } catch (error) {\n    console.error('Error fetching reviews by product ID:', error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","ShopContextProvider","store","persistor","Provider","PersistGate","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","children","loading","fileName","_jsxFileName","lineNumber","columnNumber","mongoose","connect","useNewUrlParser","useUnifiedTopology","reviewSchema","Schema","productName","String","username","productType","productPrice","productMaker","manufacturerRebates","productOnSale","reviewRating","storeID","zipCode","retailerCity","retailerState","userAge","userGender","userOccupation","reviewDate","reviewText","Review","model","app","use","bodyParser","json","post","req","res","body","newReview","save","console","log","status","message","error","get","reviews","find","productId","query"],"sources":["C:/CS 584 EWA/Assignment 5 React with Database/frontend/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ShopContextProvider from './Context/ShopContext';\r\nimport {store, persistor} from './Store/Store';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <Provider store={store}>\r\n  <PersistGate loading={null} persistor={persistor}>\r\n  <ShopContextProvider> \r\n    <App />\r\n    </ShopContextProvider>\r\n  </PersistGate>\r\n</Provider>\r\n\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n\r\n// Connect to MongoDB\r\nmongoose.connect('mongodb://localhost:27017/CustomerProductReviews', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\n\r\n// Define the schema for the reviews\r\nconst reviewSchema = new mongoose.Schema({\r\n  productName: String,\r\n  // Add other fields as needed\r\n  // For example:\r\n  username: String,\r\n  productType: String,\r\n  productPrice: String,\r\n  productMaker: String,\r\n  manufacturerRebates: String,\r\n  productOnSale: String,\r\n  productName: String,\r\n  reviewRating: String,\r\n  storeID: String,\r\n  zipCode: String,\r\n  retailerCity: String,\r\n  retailerState: String,\r\n  userAge: String,\r\n  userGender: String,\r\n  userOccupation: String,\r\n  reviewDate: String,\r\n  reviewText: String,\r\n});\r\n\r\n// Create a model based on the schema\r\nconst Review = mongoose.model('myReviews', reviewSchema);\r\n\r\n// Middleware to parse JSON requests\r\napp.use(bodyParser.json());\r\n\r\n// Route to handle the review submission\r\napp.post('/', async (req, res) => {\r\n  try {\r\n    const {\r\n      username,\r\n      productName,\r\n      productType,\r\n      productPrice,\r\n      productMaker,\r\n      manufacturerRebates,\r\n      productOnSale,\r\n      reviewRating,\r\n      storeID,\r\n      zipCode,\r\n      retailerCity,\r\n      retailerState,\r\n      userAge,\r\n      userGender,\r\n      userOccupation,\r\n      reviewDate,\r\n      reviewText,\r\n    } = req.body;\r\n\r\n    // Create a new review document\r\n    const newReview = new Review({\r\n      username,\r\n      productName,\r\n      productType,\r\n      productPrice,\r\n      productMaker,\r\n      manufacturerRebates,\r\n      productOnSale,\r\n      reviewRating,\r\n      storeID,\r\n      zipCode,\r\n      retailerCity,\r\n      retailerState,\r\n      userAge,\r\n      userGender,\r\n      userOccupation,\r\n      reviewDate,\r\n      reviewText,\r\n    });\r\n\r\n    // Save the review to the database\r\n    await newReview.save();\r\n    console.log(\"new review: \", newReview);\r\n\r\n    res.status(201).json({ message: 'Review submitted successfully' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: 'Internal Server Error' });\r\n  }\r\n});\r\n\r\napp.get('/getReviews', async (req, res) => {\r\n  try {\r\n    const reviews = await Review.find(); // Assuming \"Review\" is your Mongoose model\r\n    res.json(reviews);\r\n  } catch (error) {\r\n    console.error('Error fetching reviews:', error);\r\n    res.status(500).json({ error: 'Internal Server Error' });\r\n  }\r\n});\r\n\r\n\r\n// Define the route to get reviews by product ID\r\napp.get('/getReviewsByProductId', async (req, res) => {\r\n  try {\r\n    const productId = req.query.productId;\r\n    const reviews = await Review.find({ productName: productId });\r\n    res.json(reviews);\r\n  } catch (error) {\r\n    console.error('Error fetching reviews by product ID:', error);\r\n    res.status(500).json({ error: 'Internal Server Error' });\r\n  }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}