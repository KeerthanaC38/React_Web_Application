{"ast":null,"code":"// orderReducer.js\n\n// Define the initial state for the order\n// const initialOrderState = [{\n//     cart: [],\n//     name: '',\n//     creditCardNumber: '',\n//     street: '',\n//     city: '',\n//     state: '',\n//     zipCode: '',\n//     orderType: 'Home delivery',\n//     instorePickup: '--------------------',\n//   }];\n\nconst initialOrderState = [];\nexport const createOrder = orderData => ({\n  type: OrderTypes.CREATE_ORDER,\n  ...orderData\n});\nexport const OrderTypes = {\n  CREATE_ORDER: 'CREATE_ORDER',\n  UPDATE_ORDER: 'UPDATE_ORDER',\n  DELETE_ORDER: 'DELETE_ORDER',\n  VIEW_ORDER: 'VIEW_ORDER',\n  CANCEL_ORDER: 'CANCEL_ORDER'\n};\n\n// Action creators for updating and deleting orders\nexport const updateOrder = (orderId, updatedOrderData) => ({\n  type: OrderTypes.UPDATE_ORDER,\n  orderId,\n  ...updatedOrderData\n});\nexport const viewOrder = order => ({\n  type: OrderTypes.VIEW_ORDER,\n  ...order\n});\nexport const cancelOrder = orderId => ({\n  type: OrderTypes.CANCEL_ORDER,\n  orderId\n});\nexport const deleteOrder = orderId => ({\n  type: OrderTypes.DELETE_ORDER,\n  orderId\n});\nexport const viewOrderWithId = (orders, orderId) => {\n  // Return the order with the specified orderId\n  return orders.filter(order => {\n    console.log(order.orderId, \" :Test: \", orderId);\n    return order.orderId === orderId;\n  });\n};\nexport const generateOrderId = orders => {\n  if (orders.length === 0) {\n    // If there are no existing orders, start with order ID 1\n    return 1;\n  } else {\n    // Find the maximum order ID and increment by 1\n    const maxOrderId = Math.max(...orders.map(order => order.orderId));\n    return maxOrderId + 1;\n  }\n};\nexport const getMaxOrderId = orders => {\n  return Math.max(...orders.map(order => order.orderId));\n};\n\n// Define the order reducer\nconst orderReducer = (state = initialOrderState, action) => {\n  switch (action.type) {\n    case OrderTypes.CREATE_ORDER:\n      return [...state, {\n        orderId: action.orderId,\n        cart: action.cart,\n        name: action.name,\n        creditCardNumber: action.creditCardNumber,\n        street: action.street,\n        city: action.city,\n        state: action.states,\n        zipCode: action.zipCode,\n        orderType: action.orderType,\n        instorePickup: action.instorePickup\n      }];\n    case OrderTypes.UPDATE_ORDER:\n      console.log(\"update Order data\", action);\n      return state.map(order => order.orderId === action.orderId ? {\n        ...order,\n        name: action.name,\n        street: action.street,\n        city: action.city,\n        state: action.states,\n        zipCode: action.zipCode,\n        orderType: action.orderType,\n        instorePickup: action.instorePickup\n        // Add other properties you want to update here\n      } : order);\n\n    // case OrderTypes.UPDATE_ORDER:\n    //   return state.map((order) =>\n    //     order.orderId === action.orderId\n    //       ? { ...order, ...action.updatedOrderData }\n    //       : order\n    //   );\n\n    case OrderTypes.DELETE_ORDER:\n      return state.filter(order => order.orderId !== action.orderId);\n    case OrderTypes.CANCEL_ORDER:\n      // Remove the order with the specified orderId\n      return state.filter(order => order.orderId !== action.orderId);\n    default:\n      return state;\n  }\n};\nexport default orderReducer;","map":{"version":3,"names":["initialOrderState","createOrder","orderData","type","OrderTypes","CREATE_ORDER","UPDATE_ORDER","DELETE_ORDER","VIEW_ORDER","CANCEL_ORDER","updateOrder","orderId","updatedOrderData","viewOrder","order","cancelOrder","deleteOrder","viewOrderWithId","orders","filter","console","log","generateOrderId","length","maxOrderId","Math","max","map","getMaxOrderId","orderReducer","state","action","cart","name","creditCardNumber","street","city","states","zipCode","orderType","instorePickup"],"sources":["C:/CS 584 EWA/Assignment 5 React with Database/frontend/src/Reducer/orderReducer.js"],"sourcesContent":["// orderReducer.js\r\n\r\n// Define the initial state for the order\r\n// const initialOrderState = [{\r\n//     cart: [],\r\n//     name: '',\r\n//     creditCardNumber: '',\r\n//     street: '',\r\n//     city: '',\r\n//     state: '',\r\n//     zipCode: '',\r\n//     orderType: 'Home delivery',\r\n//     instorePickup: '--------------------',\r\n//   }];\r\n\r\n const initialOrderState=[];\r\n\r\n  export const createOrder = (orderData) => ({\r\n    type: OrderTypes.CREATE_ORDER,\r\n    ...orderData,\r\n  });\r\n\r\n\r\n  export const OrderTypes = {\r\n    CREATE_ORDER: 'CREATE_ORDER',\r\n    UPDATE_ORDER: 'UPDATE_ORDER',\r\n    DELETE_ORDER: 'DELETE_ORDER',\r\n    VIEW_ORDER: 'VIEW_ORDER',\r\n    CANCEL_ORDER: 'CANCEL_ORDER',\r\n  };\r\n  \r\n  // Action creators for updating and deleting orders\r\n  export const updateOrder = (orderId, updatedOrderData) => ({\r\n    type: OrderTypes.UPDATE_ORDER,\r\n    orderId,\r\n    ...updatedOrderData,\r\n  });\r\n\r\n  export const viewOrder = (order) => ({\r\n    type: OrderTypes.VIEW_ORDER,\r\n    ...order,\r\n  });\r\n\r\n  export const cancelOrder = (orderId) => ({\r\n    type: OrderTypes.CANCEL_ORDER,\r\n    orderId,\r\n  });\r\n  \r\n  export const deleteOrder = (orderId) => ({\r\n    type: OrderTypes.DELETE_ORDER,\r\n    orderId,\r\n  });\r\n  export const viewOrderWithId = (orders, orderId) => {\r\n    // Return the order with the specified orderId\r\n    return orders.filter((order) => {\r\n      console.log(order.orderId, \" :Test: \", orderId);\r\n      return order.orderId === orderId;\r\n    });\r\n  };\r\n  \r\n\r\n  export const generateOrderId = (orders) => {\r\n    if (orders.length === 0) {\r\n      // If there are no existing orders, start with order ID 1\r\n      return 1;\r\n    } else {\r\n      // Find the maximum order ID and increment by 1\r\n      const maxOrderId = Math.max(...orders.map((order) => order.orderId));\r\n      return maxOrderId + 1;\r\n    }\r\n  };\r\n\r\n  export const getMaxOrderId =(orders)=>{ return Math.max(...orders.map((order) => order.orderId));\r\n  };\r\n  \r\n  // Define the order reducer\r\n  const orderReducer = (state = initialOrderState, action) => {\r\n    switch (action.type) {\r\n      case OrderTypes.CREATE_ORDER:\r\n        return [\r\n          ...state,\r\n          {\r\n            orderId: action.orderId,\r\n            cart: action.cart,\r\n            name: action.name,\r\n            creditCardNumber: action.creditCardNumber,\r\n            street: action.street,\r\n            city: action.city,\r\n            state: action.states,\r\n            zipCode: action.zipCode,\r\n            orderType: action.orderType,\r\n            instorePickup: action.instorePickup,\r\n          }\r\n        ];\r\n\r\n        case OrderTypes.UPDATE_ORDER:\r\n          console.log(\"update Order data\",action);\r\n          \r\n  return state.map((order) =>\r\n    order.orderId === action.orderId\r\n      ? {\r\n          ...order,\r\n          name: action.name,\r\n          street: action.street ,\r\n          city: action.city,\r\n          state: action.states,\r\n          zipCode: action.zipCode,\r\n          orderType: action.orderType,\r\n          instorePickup: action.instorePickup,\r\n          // Add other properties you want to update here\r\n        }\r\n      : order\r\n  );\r\n  \r\n      // case OrderTypes.UPDATE_ORDER:\r\n      //   return state.map((order) =>\r\n      //     order.orderId === action.orderId\r\n      //       ? { ...order, ...action.updatedOrderData }\r\n      //       : order\r\n      //   );\r\n  \r\n      case OrderTypes.DELETE_ORDER:\r\n        return state.filter((order) => order.orderId !== action.orderId);\r\n  \r\n      case OrderTypes.CANCEL_ORDER:\r\n        // Remove the order with the specified orderId\r\n        return state.filter((order) => order.orderId !== action.orderId);\r\n  \r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default orderReducer;\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}